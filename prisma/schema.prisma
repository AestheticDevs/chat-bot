generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model agents {
  id            Int            @id @default(autoincrement())
  name          String         @db.VarChar(100)
  description   String?        @db.Text
  system_prompt String?        @db.Text
  is_active     Boolean?
  created_at    DateTime?      @default(now()) @db.DateTime(0)
  updated_at    DateTime?      @default(now()) @db.DateTime(0)
  owner_id      Int
  iframe_title  String?        @db.VarChar(200)
  iframe_width  String?        @db.VarChar(20)
  iframe_height String?        @db.VarChar(20)
  iframe_theme  String?        @db.VarChar(20)
  id_collection String?        @unique @db.VarChar(100)
  users         users          @relation(fields: [owner_id], references: [id], onUpdate: Restrict, map: "agents_ibfk_1")
  data_sources  data_sources[]
  setting       setting?
  chat_sesion   chat_session[]

  @@index([id], map: "ix_agents_id")
  @@index([owner_id], map: "owner_id")
}

model alembic_version {
  version_num String @id @db.VarChar(32)
}

model data_sources {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(200)
  savedAs       String?
  source_type   String    @db.VarChar(20)
  source_path   String?   @db.VarChar(500)
  content       String?   @db.Text
  file_type     String?   @db.VarChar(10)
  is_trained    Boolean   @default(false)
  file_size     Int?      @db.Int
  chunk_count   Int?
  error_message String?   @db.Text
  created_at    DateTime? @default(now()) @db.DateTime(0)
  updated_at    DateTime? @default(now()) @db.DateTime(0)
  agent_id      Int
  id_collection String?   @db.VarChar(100)
  description   String?
  agents        agents    @relation(fields: [agent_id], references: [id], onUpdate: Restrict, map: "data_sources_ibfk_1", onDelete: Cascade)

  @@index([agent_id], map: "agent_id")
  @@index([id], map: "ix_data_sources_id")
}

model users {
  id              Int        @id @default(autoincrement())
  username        String     @unique(map: "ix_users_username") @db.VarChar(50)
  email           String     @unique(map: "ix_users_email") @db.VarChar(100)
  hashed_password String     @db.VarChar(255)
  full_name       String     @db.VarChar(100)
  role            users_role
  is_active       Boolean?
  created_at      DateTime?  @default(now()) @db.DateTime(0)
  updated_at      DateTime?  @default(now()) @db.DateTime(0)
  created_by      Int?
  agents          agents[]
  users           users?     @relation("usersTousers", fields: [created_by], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  other_users     users[]    @relation("usersTousers")

  @@index([created_by], map: "created_by")
  @@index([id], map: "ix_users_id")
}

enum users_role {
  SUPER_ADMIN
  ADMIN
}

model setting {
  id           Int     @id @default(autoincrement())
  agent_id     Int     @unique
  agent        agents  @relation(fields: [agent_id], references: [id], onDelete: Cascade)
  greetings    String
  leave_taking String?
}

model chat_session {
  id        String    @id @default(uuid())
  name      String
  email     String
  ipAddress String?   @db.VarChar(45)
  userAgent String?   @db.Text
  createdAt DateTime  @default(now())
  endedAt   DateTime?
  agent     agents    @relation(fields: [agentId], references: [id], onDelete: Cascade)
  agentId   Int

  messages chat_message[]

  @@index([email])
  @@index([createdAt])
}

model chat_message {
  id        String       @id @default(uuid())
  session   chat_session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  sender      Sender // enum: 'user' or 'bot'
  message     String
  messageType MessageType @default(TEXT)
  metadata    Json?
  createdAt   DateTime    @default(now())

  @@index([sessionId])
  @@index([createdAt])
}

enum Sender {
  user
  bot
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  OTHER
}
